{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red52\green52\blue52;\red245\green247\blue251;\red52\green52\blue52;
\red245\green247\blue251;}
{\*\expandedcolortbl;;\cssrgb\c26667\c26667\c26667;\cssrgb\c96863\c97647\c98824;\cssrgb\c26667\c26667\c26667;
\cssrgb\c96863\c97647\c98824;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25780\viewh12320\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
https://quiz.konfhub.com/warmup\
\
SOLID Principles \
\
Single Responsibility \
Open Closed\
Liskov\'92s Substitution 	-> Replace the object of derived class \
to its base class references \
\
Vector<Integer> v = new Stack<Integer>();\
v.add<Integer>(10);\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 v.index(0, 10); // \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
class Order \{\
	List<Requests> requests; \
\
	List<Requests> getRequests() \{\
		return requests;\
	\} \
\
\}\
\
Order o = new Order();\
var request  = o.getRequests();\
request.\
\
/// original \
for(int i = 0; i < 10; i++)\
	requests.add(i);	\
\
// type 1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 for(int i = 0; i  <  10; i++) \
	requests.add(i);	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
// type 2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 for(int i = 0; i < 10; i++) \{ \
	requests.add(i);	\
\}\
\
// type 3 \
for(int i = 0; i < 10; i++) \{ \
	requests.add(i);	\
	orders.add(i);\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
// type 4\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 int i = 0;\
while(i < 10) \{\
	requests.add(i);	\
	i++; \
\} \
\
// Simian \
// PMD Copy Paste Detector \
\
// cc - 4 \
// no of paths =>  min no. of unit test cases \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 void foo(int a, int b) \{\
	\
\}\
\
\
package purchase; \
\
class Purchaser \{\
	Order order;\
\}\
\
package order; \
\
class Order \{\
	Purchaser purchasedBy;\
\} \
\
code smell -> \'93magic strings\'94 (hard coded strings in programs) \
\
cycle - \'93Cyclically dependent classes\'94 -> Design Smell \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 cycle - \'93Cyclically dependent packages\'94 -> architecture Smell \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
Purchaser -> Order \
		<-\
\
\
Acyclic Dependencies Principle \
\
\
@FunctionalInterface \
	-> lambdas \
\
\
hub-like modularisation \
		\
\
String date =  \'9319 Mar 2020\'94 \
\
\
// instead of  first class classes / objects, we use strings or enums \
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Collections.emptyList();\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
ArrayList<String> order = 
\f1 \cf4 \cb5 \expnd0\expndtw0\kerning0
Collections.emptyList();
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ArrayList<String> order = 
\f1 \cf4 \cb5 \expnd0\expndtw0\kerning0
null; 
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
Smells violate any of the design principles \
\
-> missing null check // this is a coding issue \
-> long method names // this is a coding level problem -> design proble \
\
smells \
	-> duplicated code segments -> DRY (Don\'92t Repeat Yourself)\
	-> long method 	-> SRP (Single Resposibility Principle) \
\
\
public data members \
	-> encapsulation (hiding data and implementation details) \
\
English and Dutch. German? \
	-> encapsulation (hiding variations) \
	-> Open Closed Principle \
		-> Open for extension, closed for modification \
\
missing default case -> coding issue \
using string instead of string builder -> coding issue \
\
high conditional complexity \
	-> Keep it Simple Silly (KISS principle) \
\
no catch \
\
\'93switch based on types\'94 \
	-> Open Closed Principle \
\
\
\'93mixed concerns\'94 \
	-> sepration of concerns \
\
\'93Procedural design\'94 \
	-> OOP itself is violated! \
\
\
Multifaceted abstraction => SRP \
	=> Extract hierarchy \
	\
A class knows its type! -> \'93Tagged type\'94 \
			\
Smells \'93indicate\'94 potential deeper design problems \
\
\
IFormattable vs. Device \
\
\
Abstract classes vs. Interfaces \
	things Device, formattable is a adjective \
	generalisation, protocol \
	state vs. no state  \
\
\
\
	Classes for nouns and interfaces for adjectives \
	If the methods are applicable for all derived classes 	\
	Optional methods -> Interfaces?? 	\
	If property defined, abstract class?? \
	 \
Dependency Inversion Principle \
	-> Instead of depending on concrete aspects, depend on an abstraction\
	-> Report Formatting, html tags (concrete) -> IFormatter, HTMLFormatter, \
			-> addHeading, addTable	\
\
\
Dependency Diagrams \
	-> Levelized structure map \
\
Cyclic dependency between classes 	-> Dependency Inversion Principle \
		\
SRP \
	-> What is responsibility? \
		-> Its not features! \
	-> Axis of change! \
\
\
Device can have warranty. Warranty could be lifetime warranty, limited period warranty. \
And a warranty can be voided. Warranty is valid only if the warranty is not voided, \
and it is either a lifetime warranty or the warranty is within the claimable duration for limited period \
warranty.\
\
\
Device <>\'97\'97> Warranty \
				^\
			____ |_______________________________\
			| 			| 					|\
		LimitedWarranty 	LifetimeWarranty 		VoidWarranty \
 \
Unnecessary complexity \
	-> \'93Keep it Simple Silly\'94  	\
	\
Missing generalisation \
\
\'93Composite pattern\'94 -> \
\
PowerGenerationDevice \
       ^											^ \
        |										SolarPanel \
SolarUnit \
	<>\'97 \'97 - \'97  PowerGenerationDevice  \
\
Structure101.com \
\
Structure101 Studio 4 Win64 .Net\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Structure101 Studio 4 Win64  Java \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
\
\
}